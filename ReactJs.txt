not a Test
ReactJs
1. React is a JavaScript library created by Facebook. React is a User Interface (UI) library. React is a tool for building UI components.Babel is a JavaScript compiler that can translate markup or programming languages into JavaScript.Babel is available for different conversions. React uses Babel to convert JSX into JavaScript.JSX stands for JavaScript XML. JSX is an XML/HTML like extension to JavaScript.
###
2. The method ReactDom.render() is used to render (display) HTML elements. Expressions can be used in JSX by wrapping them in curly {} braces.React applications are usually built around a single HTML element. React developers often call this the root node (root element). Elements are rendered (displayed) with the ReactDOM.render() method. React elements are immutable. They cannot be changed.The only way to change a React element is to render a new element every time:
  <div id="id01">Hello World!</div>
  <script type="text/babel">
  const name = 'John Doe';//react element
  ReactDOM.render(
      <h1>Hello {name}!</h1>,
      document.getElementById('id01'));
  </script>
###
3. React components are JavaScript functions.Conceptually, components are like JavaScript functions. They accept arbitrary inputs (called “props”) and return React elements describing what should appear on the screen.
  1) 
    function Welcome() {
      return <h1>Hello React!</h1>;
    }
    ReactDOM.render(<Welcome />, document.getElementById('root'));
  2) React can also use ES6 classes to create components.This example creates a React component named Welcome with a render method:
    class Welcome extends React.Component { 
    render() { return(<h1>Hello React!</h1>); }
    }
    ReactDOM.render(<Welcome />, document.getElementById('root'));
  3) This example creates a React component named "Welcome" with property arguments.
    function Welcome(props) {
    return <h1>Hello {props.name}!</h1>;
    }
    ReactDOM.render(<Welcome name="John Doe"/>, 
    document.getElementById('root'));
  4) This example also creates a React component named "Welcome" with property arguments.
    class Welcome extends React.Component { 
    render() { return(<h1>Hello {this.props.name}</h1>); }
    }
    ReactDOM.render(<Welcome name="John Doe"/>,   
    document.getElementById('root'));
    
###
4. In React, function components are a simpler way to write components that only contain a render method and don’t have their own state.React doesn’t require using JSX, but most people find it helpful as a visual aid when working with UI inside the JavaScript code. It also allows React to show more useful error and warning messages.
###
5. automatic semicolon insertion(ASI)
###
6. Specifying attributes in JSX
  1) You may use quotes to specify string literals as attributes:
    const element = <div tabIndex="0"></div>;
  2) You may also use curly braces to embed a JavaScript expression in an attribute
    const element = <img src={user.avatarUrl}></img>;
  3) If a tag is empty, you may close it immediately with />, like XML:
    const element = <img src={user.avatarUrl} />;  
  4) JSX Prevents Injection Attacks. It is safe to embed user input in JSX.By default, React DOM escapes any values embedded in JSX before rendering them. Thus it ensures that you can never inject anything that’s not explicitly written in your application. Everything is converted to a string before being rendered. This helps prevent XSS (cross-site-scripting) attacks.
    const title = response.potentiallyMaliciousInput;
    // This is safe:
    const element = <h1>{title}</h1>; 
###
7. An element describes what you want to see on the screen.Elements are what components are “made of”. To render a React element into a root DOM node, pass both to ReactDOM.render().
###
8. The JavaScript class(introduced in ESCAScript 2015) is a kind of special function. The class syntax has two components: class expressions and class declarations.An important difference between function declarations and class declarations is that function declarations are hoisted and class declarations are not. You first need to declare your class and then access it, otherwise code like the following will throw a ReferenceError.
  1) use class declaration
  2) use class expression(named or unnamed)
###
9. The body of a class is executed in strict mode for increased performance. 
  1) Property Methods
    1)  Generator methods.the asterisk (* ) in the shorthand syntax must be before the generator property name. non-generator method definitions may not contain the yield keyword.  
    var obj2 = { 
      * g() {
        var index = 0;
        while (true)
          yield index++;
          }          };
    var it = obj2.g();
    console.log(it.next().value); // 0
    console.log(it.next().value); // 1
    2) Async methods.
    var obj3 = { 
    async f() {
      await some_promise;
    }    };
    3) Async generator methods. 
    var obj4 = {
      async* f() {
       yield 1;
       yield 2;
       yield 3;
      }
    };   
    4)  computed method.
    var bar = {
      foo0: function() { return 0; },
      foo1() { return 1; },
      ['foo' + 2]() { return 2; }
    };
    console.log(bar.foo0()); // 0
    console.log(bar.foo1()); // 1
    console.log(bar.foo2()); // 2
  2) Static method.The static keyword defines a static method for a class. Static methods are called without instantiating their class and cannot be called through a class instance. Static methods are often used to create utility functions for an application.Boxing with prototype and static methods. When a static or prototype method is called without a value for this, the this value will be undefined inside the method.
      class Animal { 
        speak() {
          return this;
        }
        static eat() {
          return this;
        }
      }
      let obj = new Animal();
      obj.speak(); // Animal {}
      let speak = obj.speak;
      speak(); // undefined
      Animal.eat() // class Animal
      let eat = Animal.eat;
      eat(); // undefined
  3) Instance properties. (Instance properties must be defined inside of class methods.Static class-side properties and prototype data properties must be defined outside of the ClassBody declaration)
    class Rectangle {
      constructor(height, width) {    
        this.height = height;
        this.width = width;
      }
    }
    Rectangle.staticWidth = 20;
    Rectangle.prototype.prototypeWidth = 25;
  4)  Field declarations. The fields can be declared with or without a default value. Public and private field declarations are an experimental feature (stage 3) proposed at TC39, the JavaScript standards committee. Support in browsers is limited, but the feature can be used through a build step with systems like Babel.
    class Rectangle {
      height = 0;//Public field declarations
      #width;//Private field declarations
      constructor(height, width) {    
        this.height = height;
        this.#width = width;
      }
    }
###
10. Sub classing with extends. If there is a constructor present in the subclass, it needs to first call super() before using "this".
  class Animal { 
    constructor(name) {
      this.name = name;
    }
    speak() {
      console.log(`${this.name} makes a noise.`);
    }}
  class Dog extends Animal {
    constructor(name) {
      super(name); // call the super class constructor and pass in the name parameter}
    speak() {
      console.log(`${this.name} barks.`);
    }}
  let d1 = new Dog('Mitzie');
  d1.speak(); // Mitzie barks.
  // If you do not do this you will get a TypeError when you invoke speak
  Object.setPrototypeOf(Dog.prototype, Animal);
  let d = new Dog('Mitzie');
  d.speak(); // Mitzie makes a noise.
###
11. Overwrite the Array class.
  class MyArray extends Array {
    // Overwrite species to the parent Array constructor
    static get [Symbol.species]() { return Array; }
  }
  let a = new MyArray(1,2,3);
  let mapped = a.map(x => x * x);
  console.log(a);//Array [1, 2, 3]
  console.log(mapped); // Array [1, 4, 9]
  console.log(mapped instanceof Array);   // true
  console.log(mapped instanceof MyArray);	// false
###
12. Rendering a componment. We can react elements that represent DOM tags and  also represent user-defined components.When React sees an element representing a user-defined component, it passes JSX attributes to this component as a single object. We call this object “props”.Always start component names with a capital letter.React treats components starting with lowercase letters as DOM tags.
  const element = <div />;//DOM tag
  function Welcome(props) {
    return <h1>Hello, {props.name}</h1>;
  }
  const element = <Welcome name="Sara" />;//user-defined component
  ReactDOM.render(
    element,
    document.getElementById('root')
  );
###
13. All React components must act like pure functions with respect to their props. But, state allows React components to change their output over time in response to user actions, network responses, and anything else, without violating this rule.State is similar to props, but it is private and fully controlled by the component. Converting a Function to a Class. You can convert a function component like Clock to a class in five steps:
  1) Create an ES6 class, with the same name, that extends React.Component.
  2) Add a single empty method to it called render().
  3) Move the body of the function into the render() method.
  4) Replace props with this.props in the render() body.
  5) Delete the remaining empty function declaration.
###
15. Do Not Modify State Directly. The only place where you can assign this.state is the constructor.State Updates May Be Asynchronous. React may batch multiple setState() calls into a single update for performance. 
1) When <Clock /> is passed to ReactDOM.render(), React calls the constructor of the Clock component. Since Clock needs to display the current time, it initializes this.state with an object including the current time. We will later update this state.
2) React then calls the Clock component’s render() method. This is how React learns what should be displayed on the screen. React then updates the DOM to match the Clock’s render output.
3) When the Clock output is inserted in the DOM, React calls the componentDidMount() lifecycle method. Inside it, the Clock component asks the browser to set up a timer to call the component’s tick() method once a second.
4) Every second the browser calls the tick() method. Inside it, the Clock component schedules a UI update by calling setState() with an object containing the current time. Thanks to the setState() call, React knows the state has changed, and calls the render() method again to learn what should be on the screen. This time, this.state.date in the render() method will be different, and so the render output will include the updated time. React updates the DOM accordingly.
5)  If the Clock component is ever removed from the DOM, React calls the componentWillUnmount() lifecycle method so the timer is stopped.
  class Clock extends React.Component {
  constructor(props) {
    super(props);
    this.state = {date: new Date()};
  }
  componentDidMount() {
    this.timerID = setInterval(
      () => this.tick(),
      1000
    );
  }
  componentWillUnmount() {
    clearInterval(this.timerID);
  }
  tick() {
    this.setState({
      date: new Date()
    }); }
  render() {
    return (
      <div>
        <h1>Hello, world!</h1>
        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>
      </div>
    );}
  }
  ReactDOM.render(
    <Clock />,
    document.getElementById('root')
  );
###
16. Handling events with React elements is very similar to handling events on DOM elements. There are some syntactic differences. React events are named using camelCase, rather than lowercase. With JSX you pass a function as the event handler, rather than a string. you cannot return false to prevent default behavior in React. You must call preventDefault explicitly. When using React you should generally not need to call addEventListener to add listeners to a DOM element after it is created. Instead, just provide a listener when the element is initially rendered.
  function ActionLink() {
    function handleClick(e) {//e is a synthetic event
      e.preventDefault();
      console.log('The link was clicked.');
    }
    return (
      <a href="#" onClick={handleClick}>
        Click me
      </a>
    );
  }
###
17. arrow function basic sytanx
(param1, param2, …, paramN) => { statements } 
(param1, param2, …, paramN) => expression
// equivalent to: => { return expression; }

// Parentheses are optional when there's only one parameter name:
(singleParam) => { statements }
singleParam => { statements }

// The parameter list for a function with no parameters should be written with a pair of parentheses.
() => { statements }
###
18. Rendering Multiple Components. You can build collections of elements and include them in JSX using curly braces {}. A “key” is a special string attribute you need to include when creating lists of elements.Keys help React identify which items have changed, are added, or are removed. Keys should be given to the elements inside the array to give the elements a stable identity. The best way to pick a key is to use a string that uniquely identifies a list item among its siblings. Most often you would use IDs from your data as keys. We don’t recommend using indexes for keys if the order of items may change. Keys only make sense in the context of the surrounding array.Keys used within arrays should be unique among their siblings. However they don’t need to be globally unique.
const todoItems = todos.map((todo) =>
  <li key={todo.id}>
    {todo.text}
  </li>);
###
19. We can combine the form element's state and component's state by making the React state be the “single source of truth”. Then the React component that renders a form also controls what happens in that form on subsequent user input. An input form element whose value is controlled by React in this way is called a “controlled component”.Specifying the value prop on a controlled component prevents the user from changing the input unless you desire so. If you’ve specified a value but the input is still editable, you may have accidentally set value to undefined or null.
    
    
    
    
    
    
