  1.  Scripting language is interpreted. The advantages: rapid development(no compliation requirment); Portable(cross platform, no machine code, are good to control other applications); but slower than compliered language. Scripting languages are flexible(Vast modules, packages and extensions avalible). Scripting languages can be used for system administration, web development(server side, client side), text processing/manipulation, gluing programs and tool, job control and automaion and GUI.
###  
2.  The interpreter is a program that executes scripts without first compiling them into machine code per statement(Read–Eval–Print Loop (REPL)).
  1)  parse the sourcecode and perform its behavior directly
  2)  translate sourcecode into some efficient intermediate representation and immediately execute it
###    
3.  Examples of scripting languages are 
  • Shell(manyvariants),PowerShell
  • sed, awk ( Text processing)
  • Python,Perl,PHP
  • Ruby
  • Visual Basic ( VB A, VBScript, VB. NE T)
  • Javascript
  • Lua,R,...
###    
4.  Scripting languages provide an even higher- level of abstraction than java and C.
  • The main goal is programming productivity, performance is a secondary consideration
  • Provide primitive operations with greater functionality
Initial scripting languages were for job control
  • 1960s,IBMSystem 360JCL(job control language)
  • Used to launch compilation,execution,and to check return codes
###    
5.   Scripting languages are as gluing languages. 
  • Often used to combine components
  • they assume a collection of useful components already exist in other languages
  • e.g., Unix shell scripts assemble filter programs into pipelines
  • ls–l|wc-l
  • e.g.,interface between database and Webserver
  Thus often called glue languages or system integration languages
6.  Date types in python: integer, float, boolean, string, list, tuples, dictionary, functions, class, modules.
###  
7.  • A named value is often termed a variable,represents aquantity that can change over time. Types are a property of values, not names, a name can store value of a new type by a new assignment. “in” operator for strings, lists, tuples and dictionaries.
###  
8.  print statement takes a series of values separated by commas, each value is converted into a string and then printed .Quotation marks are removed when printing
###
9.  input() takes a prompt as argument, prints it, waits for user input, returns the value typed as string.
###
10. • __init__.py tells Python to treat this directory as apackage. A Python package is simply a directory of Python module(s).Module: a python module is simply a Python source file. Many modules are available with Python dstribution, many of them are dowlonaded from PyPL.
###
11. A string is formed by a succession of characters.Characters can be accessed using position, or index.Strings are immutable (You cannot change portions of a string).
  >>>'Python'[0]
Slicing: operator to access a substring. A slice is a portion of the string starting at a given position up to but not including the ending position. Indexing and slicing also used in list and dictionary
  >>>'realtor'[2:6] //'alto'
  >>>'halter'[:4] //'halt'
###
12. Any text after a hash (#)in a line is ignored by Python interpreter. Assignment statement associates a name with the result of evaluating an expression.
Same value assignment: several variables assigned the same value at once
  >>>a = b = c = 3.0
Simultaneous assignment:variables separated by commas. Must have the same number of expressions on the right side, also separated by commas
  >>>sum, diff, prod = x + y, x-y, x * y
A more subtle example
  >>>x, y = y, x # exchanges the values of variables x and y, different than x = y , y = x
###
13. Indentation is the leading whitespace(space sand tabs) at the beginning of a line. Multiple statements of the same indentation belong to the same group.
  if percent>= 90.0:
    print("Congrats, you got an A”)
  else:
    print("You are doing well in this class”)
    print("you did not get an A”)
###
14. range(1,8) denotes the range [1,8), i.e., 1 to 7 
• range(10) denotes the range [0,9], i.e., 0 to 9 
• range(0,10,2) iterates with a stride of 2
###
15. Function blocks begin with the def keyword, followed by the function name and parentheses. Code within a function starts with “:” and is indented. The optional “return [expression]” exits a function and returns a value.
  def area_of_rect(w,h):
      return w * h
  print(‘the area of the rectangle 2 by 3 is ’, area_of_rect(2,3))
###
 16.  A list is created inside square brackets. the type of elements can be different. list is mutable(different from string)
  >>>lsttwo = [5,’hello’, lst]
  >>> lst = [1, 4, 7, 9, 12]
  >>> lst[1] = 5
  >>> lst
  [1, 5, 7, 9, 12]
  >>> lst[1:3] = [2,3]
  [1, 2, 3, 9, 12]
  >>> del lst[2]
  [1, 2, 9, 12]
More bulid-in functions in list
  # lst = [1, 7, 3, 9, 2]
  s.append(x)
  lst.append(4) # [1, 7, 3, 9, 2, 4] – growing the list
  s.extend(ls)
  lst.extend([8,5]) # [1, 7, 3, 9, 2, 4, 8, 5]
  s.count(x)
  lst.count(5) # 1 - number of occurrences of x
  s.index(x)
  lst.index(5) # 7 – the index of the first occurrence of x
  s.pop()
  lst.pop() # 5 – return and remove the last element
  s.pop(i)
  lst.pop(2) # 3 – return and remove the ith element
  s.remove(x)
  lst.remove(4) # search for x and remove it (1st one only)
  s.reverse()
  lst.reverse() # [8, 2, 9, 7, 1] - reverse elements in place
  s.sort()
  lst.sort() # [1, 2, 7, 8, 9] – sort elements in ascending
  s.insert(i,x)
  lst.insert(3,2) # [1, 2, 7, 2, 8, 9] – insert x at location i
###
17. List assignment and referencing
  >>> data = [0]*5
  >>> data
  [0, 0, 0, 0, 0]
  >>> a = [1,2,3]
  >>> b = a
  >>> b[1] = 7
  >>> a
  [1, 7, 3]
  >>> a = [1,2,3]
  >>> b = a[:]#Use true copy!
###
18. Identity and equality. == means equality (Are the values equal?). “is” means identity (Are the objects identical(i.e., points to same
memory location?). Two are different. “x == y” could be True, while "x is y” is False.
###
19. join(from list to string) and split(string to list).
  >>> string = ”to be or not to be”
  >>> string.split(" ")
  ['to', 'be', 'or', 'not’, 'to', 'be'
  >>> len(string.split(" "))
  6
###
20. Tuple is very similar to list but it is immutable. Dictionary is unordered key, value pairs. Indexing by key. Two ways to define dictionary dict() and {}.
  dict2 = dict1.copy()
  dict1.update(dict2) #It may overwrite existing entries!
###
21. file operations.
  f=open("filename")#Open a file, return a file value
  f=open("filename", "w")#Open a file for writing, overwrites it if file exists
  f. read()#Return the entire file contents to a string
  f. read(n)#Return no more than n character values
  f. readline()#Return the next line of input
  f. readlines()#Return all the file as a list
  f. write(s)#Write string s to file
  f. writelines(lst)#Write list lst to file
  f. close()#Close the file
  f = open('peas.txt’)
  counts = {}
  for eachline in f:
      for ele in eachline.split():
          counts[ele] = counts.get(ele,0) + 1
          print counts
  f.close()
###
22. functions. The three functions map, filter, and reduce produce new lists that are transformation of the argument.
lambda function
  >>> square = lambda x: x**2
  >>> square(2)
  4
  >>> add = lambda x,y : x + y
  >>> add(5,3)
  8
mapping function. One-to-one transformation through a function
  >>> lst = [1,2,3,4,5]
  >>> list(map(lambda x: x ** 2,lst))
  [1, 4, 9, 16, 25]
  >>> list(map(lambda x: 1 if x % 2 == 0 else 0,lst)) 
  [0, 1, 0, 1, 0]
filter function. Apply a condition, retain ones that satisfy the condition
  >>> filter(lambda x: x % 2 == 0,lst)
  [2, 4]
Reduction: Apply a binary function to each member of a list in a row.
  >>> filter(lambda x: x % 2 == 0,lst)
  [2, 4]
list comprehension
  >>> lst = [1,2,3,4,5]
  >>> [x**2 for x in lst]
  [1, 4, 9, 16, 25]
  >>> [x**2 for x in lst if x%2 ==0]
  [4, 16]
  >>> [1 if x%2==0 else 0 for x in lst]
  [0, 1, 0, 1, 0]
###
23. To define a class in Python: Use the keyword class, followed by the class name, a parenthesized list of parent classes, and a colon.The body contains a collection of functions called methods and data values.
class BankAccount():
    def __init__(self):#constructor
        self.balance = 0 #data fields. data that an object requires. A new data field is created the first time it is assigned a value
    def deposit(self,amount):
        self.balance += amount
    def withdraw(self,amount):
        self.balance -= amount
    def get_balance(self):
        return self.balance
class CheckingAccount (BankAccount):  ## inheritance
  def __init__ (self, initBal):
    BankAccount.__init__ (self, init_bal) #When a class name is on the left of the dot, self must be passed as an explicit argument
    self.check_record = {}
  def process_check (self, number, to_who, amount):
    self.withdraw(amount)
    self.check_record[number] = (to_who, amount) 
  def check_info (self, number):
    if self.check_record.has_key(number): 
      return self.check_record[number] #When a class name is on the left of the dot, self must be passed as an explicit argument
    else:
      return 'no such check'
###
24. When Python looks for a meaning for a simple variable/name, it searches the scopes in the order: Local, Enclosing, Global and Built-in. Enclosing occurs when one function is defined inside another. A lambda function also creates its own local scope
###
25. A module is simply a Python file. A Python module is just a Python program with a list of Python statements in it, saved as a file. 
  1)  import foo #import statement scans a file, executes each statement in the program.It constructs a dictionary for all names within the modular.
    foo.bar() at execution time invokes two run-time lookups:
      • One finds the meaning for foo in the current name space 
      • One finds the data field bar in foo’s name dictionary
  2)  from foo import bar #It imports a single function, not a module
  3)  Be careful with “from math import *”. Any name in the current scope that matches a name in the imported scope will be overridden
      • Local is overridden
      • >>>e=42
      >>> from math import * 
      >>> print(e) 2.71828182846
      >>>e=42
      >>> from math import e as e_const 
      >>> print(e)
      42
      >>> print(e_const)
      2.71828182846
  
  
  
  
  
  
  
  
  
  
  
