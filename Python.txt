  1.  Scripting language is interpreted. The advantages: rapid development(no compliation requirment); Portable(cross platform, no machine code, are good to control other applications); but slower than compliered language. Scripting languages are flexible(Vast modules, packages and extensions avalible). Scripting languages can be used for system administration, web development(server side, client side), text processing/manipulation, gluing programs and tool, job control and automaion and GUI.
###  
2.  The interpreter is a program that executes scripts without first compiling them into machine code per statement(Read–Eval–Print Loop (REPL)).
  1)  parse the sourcecode and perform its behavior directly
  2)  translate sourcecode into some efficient intermediate representation and immediately execute it
###    
3.  Examples of scripting languages are 
  • Shell(manyvariants),PowerShell
  • sed, awk ( Text processing)
  • Python,Perl,PHP
  • Ruby
  • Visual Basic ( VB A, VBScript, VB. NE T)
  • Javascript
  • Lua,R,...
###    
4.  Scripting languages provide an even higher- level of abstraction than java and C.
  • The main goal is programming productivity, performance is a secondary consideration
  • Provide primitive operations with greater functionality
Initial scripting languages were for job control
  • 1960s,IBMSystem 360JCL(job control language)
  • Used to launch compilation,execution,and to check return codes
###    
5.   Scripting languages are as gluing languages. 
  • Often used to combine components
  • they assume a collection of useful components already exist in other languages
  • e.g., Unix shell scripts assemble filter programs into pipelines
  • ls–l|wc-l
  • e.g.,interface between database and Webserver
  Thus often called glue languages or system integration languages
6.  Date types in python: integer, float, boolean, string, list, tuples, dictionary, functions, class, modules.
###  
7.  • A named value is often termed a variable,represents aquantity that can change over time. Types are a property of values, not names, a name can store value of a new type by a new assignment. “in” operator for strings, lists, tuples and dictionaries.
###  
8.  print statement takes a series of values separated by commas, each value is converted into a string and then printed .Quotation marks are removed when printing
###
9.  input() takes a prompt as argument, prints it, waits for user input, returns the value typed as string.
###
10. • __init__.py tells Python to treat this directory as apackage. A Python package is simply a directory of Python module(s).Module: a python module is simply a Python source file. Many modules are available with Python dstribution, many of them are dowlonaded from PyPL.
###
11. A string is formed by a succession of characters.Characters can be accessed using position, or index.Strings are immutable (You cannot change portions of a string).
  >>>'Python'[0]
Slicing: operator to access a substring. A slice is a portion of the string starting at a given position up to but not including the ending position. Indexing and slicing also used in list and dictionary
  >>>'realtor'[2:6] //'alto'
  >>>'halter'[:4] //'halt'
###
12. Any text after a hash (#)in a line is ignored by Python interpreter. Assignment statement associates a name with the result of evaluating an expression.
Same value assignment: several variables assigned the same value at once
  >>>a = b = c = 3.0
Simultaneous assignment:variables separated by commas. Must have the same number of expressions on the right side, also separated by commas
  >>>sum, diff, prod = x + y, x-y, x * y
A more subtle example
  >>>x, y = y, x # exchanges the values of variables x and y, different than x = y , y = x
###
13. Indentation is the leading whitespace(space sand tabs) at the beginning of a line. Multiple statements of the same indentation belong to the same group.
  if percent>= 90.0:
    print("Congrats, you got an A”)
  else:
    print("You are doing well in this class”)
    print("you did not get an A”)
###
14. range(1,8) denotes the range [1,8), i.e., 1 to 7 
• range(10) denotes the range [0,9], i.e., 0 to 9 
• range(0,10,2) iterates with a stride of 2
###
15. Function blocks begin with the def keyword, followed by the function name and parentheses. Code within a function starts with “:” and is indented. The optional “return [expression]” exits a function and returns a value.
  def area_of_rect(w,h):
      return w * h
  print(‘the area of the rectangle 2 by 3 is ’, area_of_rect(2,3))
###
 16.  A list is created inside square brackets. the type of elements can be different. list is mutable(different from string)
  >>>lsttwo = [5,’hello’, lst]
  >>> lst = [1, 4, 7, 9, 12]
  >>> lst[1] = 5
  >>> lst
  [1, 5, 7, 9, 12]
  >>> lst[1:3] = [2,3]
  [1, 2, 3, 9, 12]
  >>> del lst[2]
  [1, 2, 9, 12]
More bulid-in functions in list
  # lst = [1, 7, 3, 9, 2]
  s.append(x)
  lst.append(4) # [1, 7, 3, 9, 2, 4] – growing the list
  s.extend(ls)
  lst.extend([8,5]) # [1, 7, 3, 9, 2, 4, 8, 5]
  s.count(x)
  lst.count(5) # 1 - number of occurrences of x
  s.index(x)
  lst.index(5) # 7 – the index of the first occurrence of x
  s.pop()
  lst.pop() # 5 – return and remove the last element
  s.pop(i)
  lst.pop(2) # 3 – return and remove the ith element
  s.remove(x)
  lst.remove(4) # search for x and remove it (1st one only)
  s.reverse()
  lst.reverse() # [8, 2, 9, 7, 1] - reverse elements in place
  s.sort()
  lst.sort() # [1, 2, 7, 8, 9] – sort elements in ascending
  s.insert(i,x)
  lst.insert(3,2) # [1, 2, 7, 2, 8, 9] – insert x at location i
